name: MicroPython Firmware

on:
  push:
  pull_request:
  release:
    types: [created]

env:
  MICROPYTHON_VERSION: 856e08b1931b88271816a2f60648f6ff332235b2
  PIMORONI_PICO_VERSION: v1.21.0
  WORKFLOW_VERSION: v1

jobs:
  deps:
    runs-on: ubuntu-24.04
    name: Dependencies
    steps:
    - name: Workspace Cache
      id: cache
      uses: actions/cache@v4
      with:
        path: ${{runner.workspace}}
        key: workspace-micropython-${{env.MICROPYTHON_VERSION}}-${{env.WORKFLOW_VERSION}}
        restore-keys: |
          workspace-micropython-${{env.MICROPYTHON_VERSION}}-${{env.WORKFLOW_VERSION}}

    # Check out MicroPython
    - name: Checkout MicroPython
      if: steps.cache.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: micropython/micropython
        ref: ${{env.MICROPYTHON_VERSION}}
        submodules: false  # MicroPython submodules are hideously broken
        path: micropython

    - name: Fetch Pico submodules
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      working-directory: micropython
      run: |
        git submodule update --init lib/pico-sdk
        git submodule update --init lib/cyw43-driver
        git submodule update --init lib/lwip
        git submodule update --init lib/mbedtls
        git submodule update --init lib/micropython-lib
        git submodule update --init lib/tinyusb
        git submodule update --init lib/btstack

    - name: Build mpy-cross
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      working-directory: micropython/mpy-cross
      run: make

  build:
    needs: deps
    name: Build ${{matrix.name}}
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        include:
          - name: PicoVision
            shortname: picovision
            board: PIMORONI_PICOVISION
            cmake_settings:
          - name: PicoVision Widescreen
            shortname: picovision-widescreen
            board: PIMORONI_PICOVISION
            cmake_settings: -DSUPPORT_WIDE_MODES=1

    env:
      RELEASE_FILE: pimoroni-${{matrix.shortname}}-${{github.event.release.tag_name || github.sha}}-micropython.uf2
      FIRMWARE_DIR: "$GITHUB_WORKSPACE/picovision/firmware"
      BOARD_DIR: "$GITHUB_WORKSPACE/picovision/firmware/${{matrix.board}}"

    steps:
    - name: Compiler Cache
      uses: actions/cache@v3
      with:
        path: /home/runner/.ccache
        key: ccache-micropython-${{matrix.shortname}}-${{github.ref}}-${{github.sha}}
        restore-keys: |
          ccache-micropython-${{matrix.shortname}}-${{github.ref}}
          ccache-micropython-${{matrix.shortname}}-

    - name: Workspace Cache
      uses: actions/cache@v3
      with:
        path: ${{runner.workspace}}
        key: workspace-micropython-${{env.MICROPYTHON_VERSION}}-${{env.WORKFLOW_VERSION}}
        restore-keys: |
          workspace-micropython-${{env.MICROPYTHON_VERSION}}-${{env.WORKFLOW_VERSION}}

    - uses: actions/checkout@v4
      with:
        submodules: true
        path: picovision

    # Check out Pimoroni Pico
    - uses: actions/checkout@v4
      with:
        repository: pimoroni/pimoroni-pico
        ref: ${{env.PIMORONI_PICO_VERSION}}
        submodules: true
        path: pimoroni-pico

    # HACK: Patch startup overclock into Pico SDK
    - name: "HACK: Startup Overclock Patch"
      shell: bash
      working-directory: micropython/lib/pico-sdk
      run: |
        git apply "${{env.FIRMWARE_DIR}}/startup_overclock.patch"

    - name: "HACK: CMakeLists.txt Disable C++ Exceptions Patch"
      shell: bash
      working-directory: micropython
      run: git apply "${{env.FIRMWARE_DIR}}/micropython_nano_specs.patch"

    # Install apt packages
    - name: Install CCache & Compiler
      shell: bash
      run:
        sudo apt update && sudo apt install ccache gcc-arm-none-eabi

    # Build firmware
    - name: Configure MicroPython
      shell: bash
      working-directory: micropython/ports/rp2
      run: |
        cmake -S . -B build -DPICO_BUILD_DOCS=0 -DUSER_C_MODULES=${{env.BOARD_DIR}}/micropython.cmake -DMICROPY_BOARD_DIR=${{env.BOARD_DIR}} -DMICROPY_BOARD=${{env.BOARD}} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache ${{matrix.cmake_settings}}

    - name: Build MicroPython
      shell: bash
      working-directory: micropython/ports/rp2
      run: |
        ccache --zero-stats || true
        cmake --build build -j 2
        ccache --show-stats || true

    - name: Rename .uf2 for artifact
      shell: bash
      working-directory: micropython/ports/rp2/build
      run: |
        cp firmware.uf2 ${{env.RELEASE_FILE}}

    - name: Store .uf2 as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.RELEASE_FILE}}
        path: micropython/ports/rp2/build/${{env.RELEASE_FILE}}

    - name: Upload .uf2
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: micropython/ports/rp2/build/${{env.RELEASE_FILE}}